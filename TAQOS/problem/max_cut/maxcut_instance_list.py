#!/usr/bin python3.8.10
# -*- coding: utf-8 -*-
"""
@authors Valentin Gilbert <valentin.gilbert@cea.fr>

Description:
    Create a list of instances
=========
"""

# third party import
from sympy import Union, Interval

# local import
from TAQOS.problem.instance_list import InstanceList


class MaxcutInstanceList(InstanceList):
    """
    List of instance of the maxcut problem
    """

    def __init__(self, group_name):
        super().__init__(group_name)

    def _get_coverage_intervals(self, epsilon):
        """
        Compute the coverage interval for each metric for a set of
        instances

        Returns
        -------
            dict<string, sympy.Interval>: dictionary storing the
            interval covered by each metric
        """

        metric_list = []
        for instance in self:
            metric_list.append(instance.get_metrics())

        metric_h = metric_list[0].keys()

        coverage = {}
        for h in metric_h:
            coverage[h] = []

        for content in metric_list:
            for k in coverage.keys():
                inf_tuple = max([0, float(content[k]) - epsilon])
                sup_tuple = min([float(content[k]) + epsilon, 1])
                coverage[k].append((inf_tuple, sup_tuple))

        for k, v in coverage.items():
            intervals = Union(*[Interval(*int_tup) for int_tup in v])
            coverage[k] = intervals

        return coverage

    def get_coverage(self, epsilon):
        """
        Compute the total length of coverage interval for a set of
        instances.

        Parameters
        ----------
        epsilon : float
            coverage factor

        Returns
        -------
            dict<string, float>: dictionary storing the coverage length
            of each metric
        """
        coverage_intervals = self._get_coverage_intervals(epsilon)

        coverage_length = {}
        for k, intervals in coverage_intervals.items():
            length = 0
            if isinstance(intervals, Union):
                for interval in intervals.args:
                    length += interval.end - interval.start
            else:
                try:
                    length = intervals.end - intervals.start
                except AttributeError:
                    # Generated by empty set errors
                    length = 0
            coverage_length[k] = length

        return coverage_length
